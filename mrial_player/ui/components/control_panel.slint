import { 
    Screen,
    Theme, 
    MrialButton, 
    ButtonType, 
    MrialTextInput, 
    MrialDropdown, 
    IMrialDropdownItem
} from "../common.slint";
import { VerticalBox } from "std-widgets.slint";
import { ServerFunctions } from "../components/server.slint";
import { MrialVolumeControl } from "../components/volume_control.slint";

struct ClientState {
    resolution: string,
    muted: bool,
    opus: bool
}

export global ControlPanelFunctions {
    pure callback state_update(ClientState); 
}

export global ControlPanelAdapter {
    in-out property <[IMrialDropdownItem]> resolutions: [];
    in-out property <int> resolution_index: 0;
    in-out property <bool> muted: false;
    in-out property <bool> opus: false;
}

export component ControlPanel inherits TouchArea {
    visible: false;
    width: 200px;
    height: 275px;

    in-out property <string> selected_dropdown;

    callback disconnect();

    Rectangle {
        x: 0px;
        y: 0px;
        width: parent.width;
        height: parent.height;
        border-radius: 15px;
        border-width: 1px;
        border-color: Theme.bg-secondary-color;
        background: Theme.bg-primary-color;

        VerticalLayout {
            padding: 10px;
            alignment: LayoutAlignment.space-between;
            spacing: 5px;

            HorizontalLayout {
                alignment: LayoutAlignment.center;

                VerticalLayout {
                    spacing: 5px;

                    MrialVolumeControl {
                        muted: ControlPanelAdapter.muted;
                        volume: 100;
                        width: 100%;

                        mute => {
                            ControlPanelAdapter.muted = self.muted;
                            
                            ControlPanelFunctions.state_update({
                                resolution: ControlPanelAdapter.resolutions[ControlPanelAdapter.resolution_index].value,
                                muted: ControlPanelAdapter.muted,
                                opus: ControlPanelAdapter.opus
                            });
                        }
                        volume_changed(value) => {
                            ServerFunctions.volume(value);
                        }
                    }
                    MrialDropdown {
                        label: "Resolution";
                        items: ControlPanelAdapter.resolutions;
                        open: root.selected_dropdown == "Resolution";
                        current-index: ControlPanelAdapter.resolution_index;
                        clicked => { 
                            if root.selected_dropdown == self.label {
                                root.selected_dropdown = "";
                            } else {
                                root.selected_dropdown = self.label;
                            }; 
                        }
                        selected => {
                            ControlPanelAdapter.resolution_index = self.current_index;

                            ControlPanelFunctions.state_update({
                                resolution: ControlPanelAdapter.resolutions[ControlPanelAdapter.resolution_index].value,
                                muted: ControlPanelAdapter.muted,
                                opus: ControlPanelAdapter.opus
                            });
                            root.selected_dropdown = "";
                        }
                    }
                    MrialDropdown {
                        label: "Mode";
                        items: [
                            {
                                label: "Ultra-Low Latency",
                                value: "low-latency"
                            },
                            {
                                label: "Balanced",
                                value: "balanced"
                            },
                            {
                                label: "Buttery-Smooth",
                                value: "smooth"
                            },
                        ];
                        open: root.selected_dropdown == self.label;
                        clicked => { 
                            if root.selected_dropdown == self.label {
                                root.selected_dropdown = "";
                            } else {
                                root.selected_dropdown = self.label;
                            }; 
                        }
                        selected => {
                            root.selected_dropdown = "";
                        }
                        current-index: 0;
                    }
                    MrialDropdown {
                        label: "Audio";
                        current-index: ControlPanelAdapter.opus ? 1 : 0;
                        items: [
                            {
                                label: "Original",
                                value: "original"
                            },
                            {
                                label: "Opus",
                                value: "opus"
                            }
                        ];
                        open: root.selected_dropdown == self.label;
                        clicked => { 
                            if root.selected_dropdown == self.label {
                                root.selected_dropdown = "";
                            } else {
                                root.selected_dropdown = self.label;
                            }; 
                        }
                        selected => {
                            ControlPanelFunctions.state_update({
                                resolution: ControlPanelAdapter.resolutions[ControlPanelAdapter.resolution_index].value,
                                muted: ControlPanelAdapter.muted,
                                opus: self.items[self.current_index].value == "opus"
                            });


                            root.selected_dropdown = "";
                        }
                    }
                }
            }
            Rectangle {
                width: 100%;
                height: 35px;
                border-radius: 5px;
                background: Theme.bg-primary-brush;

                opacity: touch-area.has-hover ? 0.8 : 1.0;
                animate opacity { duration: 250ms; }

                touch_area := TouchArea {
                    mouse-cursor: MouseCursor.pointer;
                    clicked => { 
                        ServerFunctions.disconnect();
                        disconnect();
                    }
                }

                HorizontalLayout {
                    alignment: LayoutAlignment.center;
                    spacing: 5px;

                    Text {
                        text: "Disconnect";
                        font-size: 12px;
                        font-weight: 500;
                        color: white;
                        horizontal-alignment: TextHorizontalAlignment.center;
                        vertical-alignment: TextVerticalAlignment.center;
                    }
                }
            }
        }
    }
}